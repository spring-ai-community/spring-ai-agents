[
  {
    "filename": "auto-configurations/mcp/spring-ai-autoconfigure-mcp-server/src/main/java/org/springframework/ai/mcp/server/autoconfigure/McpServerAutoConfiguration.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "patch": "@@ -55,9 +55,11 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.log.LogAccessor;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.MimeType;\n+import org.springframework.web.context.support.StandardServletEnvironment;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for the Model Context Protocol (MCP)\n@@ -177,7 +179,7 @@ public McpSyncServer mcpSyncServer(McpServerTransportProvider transportProvider,\n \t\t\tObjectProvider<List<SyncPromptSpecification>> prompts,\n \t\t\tObjectProvider<List<SyncCompletionSpecification>> completions,\n \t\t\tObjectProvider<BiConsumer<McpSyncServerExchange, List<McpSchema.Root>>> rootsChangeConsumers,\n-\t\t\tList<ToolCallbackProvider> toolCallbackProvider) {\n+\t\t\tList<ToolCallbackProvider> toolCallbackProvider, Environment environment) {\n \n \t\tMcpSchema.Implementation serverInfo = new Implementation(serverProperties.getName(),\n \t\t\t\tserverProperties.getVersion());\n@@ -258,6 +260,9 @@ public McpSyncServer mcpSyncServer(McpServerTransportProvider transportProvider,\n \t\tserverBuilder.instructions(serverProperties.getInstructions());\n \n \t\tserverBuilder.requestTimeout(serverProperties.getRequestTimeout());\n+\t\tif (environment instanceof StandardServletEnvironment) {\n+\t\t\tserverBuilder.immediateExecution(true);\n+\t\t}\n \n \t\treturn serverBuilder.build();\n \t}"
  },
  {
    "filename": "auto-configurations/mcp/spring-ai-autoconfigure-mcp-server/src/test/java/org/springframework/ai/mcp/server/autoconfigure/McpWebMvcServerAutoConfigurationIT.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "patch": "@@ -17,11 +17,16 @@\n package org.springframework.ai.mcp.server.autoconfigure;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.modelcontextprotocol.server.McpSyncServer;\n import io.modelcontextprotocol.server.transport.WebMvcSseServerTransportProvider;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.boot.autoconfigure.AutoConfigurations;\n import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.util.ReflectionUtils;\n+import org.springframework.web.context.support.StandardServletEnvironment;\n import org.springframework.web.servlet.function.RouterFunction;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -68,4 +73,21 @@ void serverBaseUrlConfiguration() {\n \t\t\t\t.isEqualTo(\"/test\"));\n \t}\n \n+\t@Test\n+\tvoid servletEnvironmentConfiguration() {\n+\t\tnew ApplicationContextRunner(() -> new AnnotationConfigApplicationContext() {\n+\t\t\t@Override\n+\t\t\tpublic ConfigurableEnvironment getEnvironment() {\n+\t\t\t\treturn new StandardServletEnvironment();\n+\t\t\t}\n+\t\t}).withConfiguration(\n+\t\t\t\tAutoConfigurations.of(McpWebMvcServerAutoConfiguration.class, McpServerAutoConfiguration.class))\n+\t\t\t.run(context -> {\n+\t\t\t\tvar mcpSyncServer = context.getBean(McpSyncServer.class);\n+\t\t\t\tvar field = ReflectionUtils.findField(McpSyncServer.class, \"immediateExecution\");\n+\t\t\t\tfield.setAccessible(true);\n+\t\t\t\tassertThat(field.getBoolean(mcpSyncServer)).isTrue();\n+\t\t\t});\n+\t}\n+\n }"
  }
]