name: CI/CD build

on:
  schedule:
    # Daily builds at reasonable intervals
    - cron: '0 9 * * 1-5'    # 9:00 AM UTC weekdays
    - cron: '0 21 * * 1-5'   # 9:00 PM UTC weekdays
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'spring-ai-community' }}
    concurrency:
      group: continuous-integration-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install Claude Code CLI
        run: |
          # Install Claude Code CLI from npm globally - npm handles the symlink automatically
          npm install -g @anthropic-ai/claude-code
          echo "✅ Claude Code CLI installed via npm"

      - name: Install Gemini CLI
        run: |
          # Create directories
          mkdir -p "$HOME/.local/bin"
          mkdir -p "$HOME/bin"
          # Try pip installation first (most reliable)
          pip install google-generativeai[cli] || true
          # Try the official installer
          curl -fsSL https://cli.gemini.google.com/install.sh 2>/dev/null | bash || true
          # Try direct download if available
          curl -L -o "$HOME/.local/bin/gemini" "https://github.com/google-gemini/gemini-cli/releases/latest/download/gemini-linux-amd64" 2>/dev/null || true
          chmod +x "$HOME/.local/bin/gemini" 2>/dev/null || true
          # Add paths
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Verify CLI installations
        run: |
          echo "=== PATH verification ==="
          echo "PATH: $PATH"
          echo ""
          echo "=== Claude Code CLI ==="
          # Check if the symlink exists (it's actually named 'claude', not 'claude-code')
          if [ -L "/usr/local/bin/claude" ] && [ -f "/usr/local/bin/claude" ]; then
            echo "✅ Claude CLI symlink exists"
            /usr/local/bin/claude --version || exit 1
            echo "✅ Claude CLI verified"
          elif [ -f "/usr/local/bin/claude-code" ]; then
            echo "✅ Claude Code CLI found"
            /usr/local/bin/claude-code --version || exit 1
            echo "✅ Claude Code CLI verified"
          else
            echo "ERROR: Claude CLI not found"
            ls -la /usr/local/bin/claude* 2>/dev/null || echo "No claude binaries in /usr/local/bin"
            exit 1
          fi
          echo ""
          echo "=== Gemini CLI ==="
          # Check hardcoded locations first
          if [ -f "$HOME/.local/bin/gemini" ]; then
            echo "✅ Found gemini in ~/.local/bin"
            "$HOME/.local/bin/gemini" --version || exit 1
            echo "✅ Gemini CLI verified"
          elif [ -f "/usr/local/bin/gemini" ]; then
            echo "✅ Found gemini in /usr/local/bin"
            /usr/local/bin/gemini --version || exit 1
            echo "✅ Gemini CLI verified"
          else
            echo "ERROR: Gemini CLI not found in expected locations"
            echo "Quick fallback check..."
            ls -la "$HOME/.local/bin/" 2>/dev/null | head -3 || echo ".local/bin not accessible"
            ls -la /usr/local/bin/ 2>/dev/null | grep -i gemini || echo "No gemini in /usr/local/bin"
            exit 1
          fi

      - name: Build and test with Maven
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: ./mvnw --batch-mode clean test

      - name: Generate Java docs
        if: github.ref == 'refs/heads/main'
        run: ./mvnw --batch-mode javadoc:aggregate

      - name: Build documentation
        if: github.ref == 'refs/heads/main'
        run: ./mvnw clean antora:antora -pl docs