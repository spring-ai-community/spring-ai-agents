name: CI/CD with Integration Tests

on:
  schedule:
    # Daily builds at reasonable intervals
    - cron: '0 9 * * 1-5'    # 9:00 AM UTC weekdays
    - cron: '0 21 * * 1-5'   # 9:00 PM UTC weekdays
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

jobs:
  build-and-publish:
    name: Build, Test, and Publish
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'spring-ai-community' }}
    concurrency:
      group: continuous-integration-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for commit validation

      - name: Validate commit messages
        run: |
          echo "Checking commit messages for AI attribution..."

          FOUND_ATTRIBUTION=false

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, check commits in the PR
            echo "Checking commits in PR from ${{ github.event.pull_request.base.sha }} to ${{ github.event.pull_request.head.sha }}"
            COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})

            for commit in $COMMITS; do
              echo "Checking commit: $commit"
              COMMIT_MSG=$(git log --format=%B -n 1 $commit)

              # Check for Claude attribution patterns
              if echo "$COMMIT_MSG" | grep -q "ü§ñ.*Claude Code"; then
                echo "‚ùå ERROR: Commit $commit contains Claude Code attribution"
                echo "Found: $(echo "$COMMIT_MSG" | grep "ü§ñ.*Claude Code")"
                FOUND_ATTRIBUTION=true
              fi

              if echo "$COMMIT_MSG" | grep -q "Co-Authored-By.*Claude"; then
                echo "‚ùå ERROR: Commit $commit contains Claude co-authoring"
                echo "Found: $(echo "$COMMIT_MSG" | grep "Co-Authored-By.*Claude")"
                FOUND_ATTRIBUTION=true
              fi
            done
          else
            # For pushes to main, check the last commit
            COMMIT=$(git rev-parse HEAD)
            echo "Checking pushed commit: $COMMIT"
            COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT)

            # Check for Claude attribution patterns
            if echo "$COMMIT_MSG" | grep -q "ü§ñ.*Claude Code"; then
              echo "‚ùå ERROR: Commit $COMMIT contains Claude Code attribution"
              echo "Found: $(echo "$COMMIT_MSG" | grep "ü§ñ.*Claude Code")"
              FOUND_ATTRIBUTION=true
            fi

            if echo "$COMMIT_MSG" | grep -q "Co-Authored-By.*Claude"; then
              echo "‚ùå ERROR: Commit $COMMIT contains Claude co-authoring"
              echo "Found: $(echo "$COMMIT_MSG" | grep "Co-Authored-By.*Claude")"
              FOUND_ATTRIBUTION=true
            fi
          fi

          if [ "$FOUND_ATTRIBUTION" = true ]; then
            echo ""
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "üö´ BLOCKING PR MERGE"
              echo "Cannot merge PR with AI attribution in commit messages."
            else
              echo "üö´ BLOCKING SNAPSHOT PUBLICATION"
              echo "Cannot publish snapshots with AI attribution in commit messages."
            fi
            echo ""
            echo "üí° To fix this:"
            echo "1. Use 'git rebase -i' to edit the problematic commit(s)"
            echo "2. Remove the Claude attribution lines from commit messages"
            echo "3. Force push the corrected commits"
            echo ""
            echo "See CLAUDE.md for commit message guidelines."
            exit 1
          else
            echo "‚úÖ All commit messages are clean - proceeding"
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          # Install Claude Code CLI from npm globally - npm handles the symlink automatically
          npm install -g @anthropic-ai/claude-code --silent
          echo "‚úÖ Claude Code CLI installed via npm"

      - name: Install Gemini CLI
        run: |
          # Install official Gemini CLI from npm
          npm install -g @google/gemini-cli --silent
          echo "‚úÖ Gemini CLI installed via npm"

      - name: Verify CLI installations
        run: |
          echo "=== Verifying CLI installations ==="
          if command -v claude >/dev/null 2>&1; then
            echo "‚úÖ Claude CLI verified: $(claude --version 2>&1)"
          else
            echo "‚ùå Claude CLI not found in PATH"
            echo "PATH: $PATH"
            ls -la /usr/local/bin/ | grep claude || echo "No claude in /usr/local/bin/"
            exit 1
          fi
          if command -v gemini >/dev/null 2>&1; then
            echo "‚úÖ Gemini CLI verified: $(gemini --version 2>&1)"
          else
            echo "‚ùå Gemini CLI not found in PATH"
            echo "PATH: $PATH"
            ls -la /usr/local/bin/ | grep gemini || echo "No gemini in /usr/local/bin/"
            exit 1
          fi

      - name: Build and test with Maven
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: ./mvnw --batch-mode --quiet clean verify -Pfailsafe

      - name: Generate Java docs
        if: github.ref == 'refs/heads/main'
        run: ./mvnw --batch-mode --quiet javadoc:aggregate

      - name: Build documentation
        if: github.ref == 'refs/heads/main'
        run: ./mvnw --quiet clean antora:antora -pl docs

      - name: Publish snapshots to Maven Central
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Publishing snapshot artifacts to Maven Central..."
          ./mvnw --batch-mode --update-snapshots install deploy