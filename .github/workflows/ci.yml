name: CI/CD build

on:
  schedule:
    # Daily builds at reasonable intervals
    - cron: '0 9 * * 1-5'    # 9:00 AM UTC weekdays
    - cron: '0 21 * * 1-5'   # 9:00 PM UTC weekdays
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

jobs:
  validate:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'spring-ai-community' }}
    outputs:
      should-publish: ${{ steps.validation.outputs.should-publish }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        id: validation
        run: |
          echo "Checking commit messages for AI attribution..."
          FOUND_ATTRIBUTION=false

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Checking commits in PR from ${{ github.event.pull_request.base.sha }} to ${{ github.event.pull_request.head.sha }}"
            COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})

            for commit in $COMMITS; do
              echo "Checking commit: $commit"
              COMMIT_MSG=$(git log --format=%B -n 1 $commit)

              if echo "$COMMIT_MSG" | grep -q "ü§ñ.*Claude Code"; then
                echo "‚ùå ERROR: Commit $commit contains Claude Code attribution"
                FOUND_ATTRIBUTION=true
              fi

              if echo "$COMMIT_MSG" | grep -q "Co-Authored-By.*Claude"; then
                echo "‚ùå ERROR: Commit $commit contains Claude co-authoring"
                FOUND_ATTRIBUTION=true
              fi
            done
          else
            COMMIT=$(git rev-parse HEAD)
            echo "Checking pushed commit: $COMMIT"
            COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT)

            if echo "$COMMIT_MSG" | grep -q "ü§ñ.*Claude Code"; then
              echo "‚ùå ERROR: Commit $COMMIT contains Claude Code attribution"
              FOUND_ATTRIBUTION=true
            fi

            if echo "$COMMIT_MSG" | grep -q "Co-Authored-By.*Claude"; then
              echo "‚ùå ERROR: Commit $COMMIT contains Claude co-authoring"
              FOUND_ATTRIBUTION=true
            fi
          fi

          if [ "$FOUND_ATTRIBUTION" = true ]; then
            echo "üö´ BLOCKING MERGE/PUBLICATION"
            exit 1
          else
            echo "‚úÖ All commit messages are clean"
            # Set output for publishing decision
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
              echo "should-publish=true" >> $GITHUB_OUTPUT
            else
              echo "should-publish=false" >> $GITHUB_OUTPUT
            fi
          fi

  test:
    name: Test (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.repository_owner == 'spring-ai-community' }}
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, claude-integration, gemini-integration, core-integration]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code --silent
          echo "‚úÖ Claude Code CLI installed via npm"

      - name: Install Gemini CLI
        run: |
          npm install -g @google/gemini-cli --silent
          echo "‚úÖ Gemini CLI installed via npm"

      - name: Verify CLI installations
        run: |
          if command -v claude >/dev/null 2>&1; then
            echo "‚úÖ Claude CLI verified: $(claude --version 2>&1)"
          else
            echo "‚ùå Claude CLI not found in PATH"
            exit 1
          fi

          if command -v gemini >/dev/null 2>&1; then
            echo "‚úÖ Gemini CLI verified: $(gemini --version 2>&1)"
          else
            echo "‚ùå Gemini CLI not found in PATH"
            exit 1
          fi

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: ./mvnw --batch-mode --quiet clean test

      - name: Run Claude Integration Tests
        if: matrix.test-type == 'claude-integration'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          ./mvnw --batch-mode clean failsafe:integration-test failsafe:verify -Pfailsafe -pl provider-sdks/claude-code-sdk,agent-models/spring-ai-claude-code

      - name: Run Gemini Integration Tests
        if: matrix.test-type == 'gemini-integration'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          ./mvnw --batch-mode clean failsafe:integration-test failsafe:verify -Pfailsafe -pl provider-sdks/gemini-cli-sdk,agent-models/spring-ai-gemini

      - name: Run Core Integration Tests
        if: matrix.test-type == 'core-integration'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          ./mvnw --batch-mode clean failsafe:integration-test failsafe:verify -Pfailsafe -pl spring-ai-agent-client,agents

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: github.ref == 'refs/heads/main' && github.repository_owner == 'spring-ai-community'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Generate Java docs
        run: ./mvnw --batch-mode --quiet javadoc:aggregate

      - name: Build documentation
        run: ./mvnw --quiet clean antora:antora -pl docs

  publish:
    name: Publish Snapshots
    runs-on: ubuntu-latest
    needs: [validate, test, build-docs]
    if: needs.validate.outputs.should-publish == 'true'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Publish snapshots to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: |
          echo "Publishing snapshot artifacts to Maven Central..."
          ./mvnw --batch-mode --update-snapshots deploy