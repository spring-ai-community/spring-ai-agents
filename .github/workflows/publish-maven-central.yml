name: Publish Release

on:
  push:
    tags:
      - 'v*'  # Matches tags like v0.1.0

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    name: Validate Commit Messages
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages in tag
        run: |
          echo "Checking commit messages for AI attribution in tagged release..."

          # Get the commit that the tag points to
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
          echo "Checking tagged commit: $TAG_COMMIT"
          COMMIT_MSG=$(git log --format=%B -n 1 $TAG_COMMIT)

          FOUND_ATTRIBUTION=false

          # Check for Claude attribution patterns
          if echo "$COMMIT_MSG" | grep -q "ü§ñ.*Claude Code"; then
            echo "‚ùå ERROR: Tagged commit $TAG_COMMIT contains Claude Code attribution"
            echo "Found: $(echo "$COMMIT_MSG" | grep "ü§ñ.*Claude Code")"
            FOUND_ATTRIBUTION=true
          fi

          if echo "$COMMIT_MSG" | grep -q "Co-Authored-By.*Claude"; then
            echo "‚ùå ERROR: Tagged commit $TAG_COMMIT contains Claude co-authoring"
            echo "Found: $(echo "$COMMIT_MSG" | grep "Co-Authored-By.*Claude")"
            FOUND_ATTRIBUTION=true
          fi

          if [ "$FOUND_ATTRIBUTION" = true ]; then
            echo ""
            echo "üö´ BLOCKING RELEASE PUBLICATION"
            echo "Cannot publish releases with AI attribution in commit messages."
            echo ""
            echo "üí° To fix this:"
            echo "1. Delete the tag: git tag -d ${{ github.ref_name }}"
            echo "2. Fix the commit message using git rebase"
            echo "3. Re-create and push the tag"
            echo ""
            echo "See CLAUDE.md for commit message guidelines."
            exit 1
          else
            echo "‚úÖ Tagged commit message is clean - proceeding with release publication"
          fi

  publish:
    needs: validate-commits
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code --silent
          echo "‚úÖ Claude Code CLI installed via npm"

      - name: Install Gemini CLI
        run: |
          npm install -g @google/gemini-cli --silent
          echo "‚úÖ Gemini CLI installed via npm"

      - name: Verify CLI installations
        run: |
          echo "=== Verifying CLI installations ==="
          if command -v claude >/dev/null 2>&1; then
            echo "‚úÖ Claude CLI verified: $(claude --version 2>&1)"
          else
            echo "‚ùå Claude CLI not found in PATH"
            echo "PATH: $PATH"
            ls -la /usr/local/bin/ | grep claude || echo "No claude in /usr/local/bin/"
            exit 1
          fi
          if command -v gemini >/dev/null 2>&1; then
            echo "‚úÖ Gemini CLI verified: $(gemini --version 2>&1)"
          else
            echo "‚ùå Gemini CLI not found in PATH"
            echo "PATH: $PATH"
            ls -la /usr/local/bin/ | grep gemini || echo "No gemini in /usr/local/bin/"
            exit 1
          fi

      - name: Deploy RELEASE to Maven Central (tagged)
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ "$VERSION" == *"-SNAPSHOT" ]]; then
            echo "‚ùå Error: Version $VERSION is a SNAPSHOT. Releases must not be -SNAPSHOT."
            exit 1
          fi
          mvn --batch-mode -Prelease deploy

