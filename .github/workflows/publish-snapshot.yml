name: Publish Snapshot

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          # Install Claude Code CLI from npm globally - npm handles the symlink automatically
          npm install -g @anthropic-ai/claude-code --silent
          echo "✅ Claude Code CLI installed via npm"

      - name: Install Gemini CLI
        run: |
          # Install official Gemini CLI from npm
          npm install -g @google/gemini-cli --silent
          echo "✅ Gemini CLI installed via npm"

      - name: Verify CLI installations
        run: |
          echo "=== Verifying CLI installations ==="
          # Check Claude CLI (check multiple locations)
          if command -v claude >/dev/null 2>&1; then
            echo "✅ Claude CLI verified: $(claude --version 2>&1)"
          else
            echo "❌ Claude CLI not found in PATH"
            echo "PATH: $PATH"
            ls -la /usr/local/bin/ | grep claude || echo "No claude in /usr/local/bin/"
            exit 1
          fi
          # Check Gemini CLI (check multiple locations)
          if command -v gemini >/dev/null 2>&1; then
            echo "✅ Gemini CLI verified: $(gemini --version 2>&1)"
          else
            echo "❌ Gemini CLI not found in PATH"
            echo "PATH: $PATH"
            ls -la /usr/local/bin/ | grep gemini || echo "No gemini in /usr/local/bin/"
            exit 1
          fi

      - name: Build with Maven and deploy to Sonatype snapshot repository
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mvn -Prelease --batch-mode --quiet --update-snapshots deploy

      - name: Capture project version
        run: echo PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version --quiet -DforceStdout) >> $GITHUB_ENV